#!/bin/bash
# with love from jaded <3

# create a new directory and enter it
function mkd() 
{
	mkdir -p "$@" && cd "$_";
}

# create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() 
{
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "compressing .tar ($((size / 1000)) kb) using \`${cmd}\`…";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kb) created successfully!";
}

# determine size of a file or total size of a directory
function fs() 
{
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# use git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# create a data url from a file
function dataurl() 
{
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Start an http server from a directory, optionally specifying the port
function server() 
{
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# start a php server from a directory, optionally specifying the port
function phpserver() 
{
	local port="${1:-4000}";
	local ip=$(ipconfig getifaddr en1);
	sleep 1 && open "http://${ip}:${port}/" &
	php -S "${ip}:${port}";
}

# compare original and gzipped file size
function gz() 
{
	local origsize=$(wc -c < "$1");
	local gzipsize=$(gzip -c "$1" | wc -c);
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
	printf "orig - %d bytes\n" "$origsize";
	printf "gzip - %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# show all the names (cns and sans) listed in the ssl certificate
function getcertnames() 
{
	if [ -z "${1}" ]; then
		echo "error - No domain specified";
		return 1;
	fi;

	local domain="${1}";
	echo "testing ${domain}…";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "common name - ";
		echo ""; # newline
		echo "${certText}" | grep "subject - " | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "subject alternative name - ";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "subject alternative name - " \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "error - certificate not found";
		return 1;
	fi;
}

# short for `cdfinder`
function cdf() 
{
    cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# run `dig` and display the most useful info
function digga() 
{
    dig +nocmd "$1" any +multiline +noall +answer;
}

# open hex fiend from cli
function hexf() 
{ 
    open -a "Hex Fiend" $1 
}

# open binary ninja and detach console
function binja() 
{ 
    open -a "Binary Ninja" $1 & disown 
}

function sign() 
{ 
    sudo xattr -rd com.apple.quarantine $1 
    sudo codesign -fs - $1 
}

# see who is listening on a port
function listening() 
{
    if [ $# -eq 0 ]; then
        sudo lsof -iTCP -sTCP:LISTEN -n -P
    elif [ $# -eq 1 ]; then
        sudo lsof -iTCP -sTCP:LISTEN -n -P | grep -i --color $1
    else
        echo "usage - listening [pattern]"
    fi
}

# `o` with no arguments opens the current directory otherwise opens the given
function o() 
{
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled
function tre() 
{
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

function findpid () 
{
  lsof -i tcp:$@
}

# USed to kill pid
function killpid () 
{
  kill -9 $@
}